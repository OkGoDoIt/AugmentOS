services:
  # Build shared packages first
  shared-packages:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./:/app
      - /app/node_modules
    command: >
      bash -c "bun install && 
              cd packages/utils && bun run build &&
              cd ../sdk && bun run build &&
              cd ../config && bun run build &&
              cd ../agents && bun run build"
    networks:
      - augmentos-network
    environment:
      - SERVICE_NAME=shared-packages

  # Cloud service
  cloud:
    stop_grace_period: 10s
    init: true
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          memory: 256M
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - target: 80
        published: ${CLOUD_PORT:-7002}
        protocol: tcp
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0
      - SERVICE_NAME=cloud
    env_file:
      - .env
      - .env.production
    volumes:
      - ./:/app
      - node_modules:/app/node_modules
    command: bash -c "bun install && cd packages/cloud && bun run build && bun run start"
    networks:
      - augmentos-network
    depends_on:
      - shared-packages

  # Live Captions service - using local app files
  live-captions:
    build:
      context: ../../AugmentApps/Live-Captions  # Path relative to this docker-compose file
      dockerfile: Dockerfile.dev
    container_name: live-captions
    ports:
      - target: 80
        published: ${LIVE_CAPTIONS_PORT:-7010}
        protocol: tcp
    environment:
      - PORT=80
      - CLOUD_HOST_NAME=cloud
      - NODE_ENV=production
    volumes:
      - ../../AugmentApps/Live-Captions/src:/app/src:delegated
      - ../../AugmentApps/Live-Captions/tsconfig.json:/app/tsconfig.json:delegated
      - ../../AugmentApps/Live-Captions/dev.sh:/app/dev.sh:delegated
      - ../../AugmentApps/Live-Captions/entrypoint.sh:/entrypoint.sh:delegated
      # Don't sync node_modules back to host
      - /app/node_modules
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - augmentos-network
    depends_on:
      - cloud
      
  # MentraMerge service - using local app files
  merge:
    build:
      context: ../../AugmentApps/MentraMerge  # Path relative to this docker-compose file
      dockerfile: Dockerfile.dev
    container_name: merge
    ports:
      - target: 80
        published: ${MERGE_PORT:-7016}
        protocol: tcp
    environment:
      - PORT=80
      - CLOUD_HOST_NAME=cloud
      - NODE_ENV=production
      - MERGE_API_KEY=${MERGE_API_KEY:-test_key}
    volumes:
      - ../../AugmentApps/MentraMerge/src:/app/src:delegated
      - ../../AugmentApps/MentraMerge/tsconfig.json:/app/tsconfig.json:delegated
      - ../../AugmentApps/MentraMerge/dev.sh:/app/dev.sh:delegated
      - ../../AugmentApps/MentraMerge/entrypoint.sh:/entrypoint.sh:delegated
      # Don't sync node_modules back to host
      - /app/node_modules
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - augmentos-network
    depends_on:
      - cloud

  # Dashboard Manager service
  dashboard-manager:
    stop_grace_period: 10s
    init: true
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - target: 80
        published: ${DASHBOARD_MANAGER_PORT:-7012}
        protocol: tcp
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0
      - SERVICE_NAME=dashboard-manager
    env_file:
      - .env
      - .env.production
    volumes:
      - ./:/app
      - node_modules:/app/node_modules
      - ./logs:/app/logs
    command: bash -c "bun install && cd packages/apps/dashboard-manager && bun run build && bun run start"
    networks:
      - augmentos-network
    depends_on:
      - shared-packages
      - cloud
  
  # Notifications service
  notify:
    stop_grace_period: 10s
    init: true
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - target: 80
        published: ${NOTIFY_PORT:-7014}
        protocol: tcp
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0
      - SERVICE_NAME=notify
    env_file:
      - .env
      - .env.production
    volumes:
      - ./:/app
      - node_modules:/app/node_modules
      - ./logs:/app/logs
    command: bash -c "bun install && cd packages/apps/notify && bun run build && bun run start"
    networks:
      - augmentos-network
    depends_on:
      - shared-packages
      - cloud

  # Mira AI service
  mira:
    stop_grace_period: 10s
    init: true
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - target: 80
        published: ${MIRA_PORT:-7015}
        protocol: tcp
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0
      - SERVICE_NAME=mira
    env_file:
      - .env
      - .env.production
    volumes:
      - ./:/app
      - node_modules:/app/node_modules
      - ./logs:/app/logs
    command: bash -c "bun install && cd packages/apps/miraai && bun run build && bun run start"
    networks:
      - augmentos-network
    depends_on:
      - shared-packages
      - cloud
 
  live-translation:
    stop_grace_period: 10s
    init: true
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - target: 80
        published: ${LIVE_TRANSLATION_PORT:-7017}
        protocol: tcp
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0
      - SERVICE_NAME=live-translation
    env_file:
      - .env
      - .env.production
    volumes:
      - ./:/app
      - node_modules:/app/node_modules
      - ./logs:/app/logs
    command: bash -c "bun install && cd packages/apps/livetranslation && bun run build && bun run start"
    networks:
      - augmentos-network
    depends_on:
      - shared-packages
      - cloud

networks:
  augmentos-network:
    driver: bridge
    external: true

volumes:
  node_modules: